  $ ../../../../../../install/default/bin/stanc --auto-format probit-multi-good.stan
data {
  int<lower=1> K;
  int<lower=1> D;
  int<lower=0> N;
  array[N, D] int<lower=0, upper=1> y;
  array[N] vector[K] x;
}
parameters {
  matrix[D, K] beta;
  cholesky_factor_corr[D] L_Omega;
  array[N, D] real<lower=0, upper=1> u;
}
model {
  L_Omega ~ lkj_corr_cholesky(4);
  to_vector(beta) ~ normal(0, 5);
  {
    for (n in 1 : N) {
      vector[D] mu;
      vector[D] z;
      real prev;
      mu = beta * x[n];
      prev = 0;
      for (d in 1 : D) {
        real bound;
        bound = Phi(-(mu[d] + prev) / L_Omega[d, d]);
        if (y[n, d] == 1) {
          real t;
          t = bound + (1 - bound) * u[n, d];
          z[d] = inv_Phi(t);
          target += log1m(bound);
        }
        else {
          real t;
          t = bound * u[n, d];
          z[d] = inv_Phi(t);
          target += log(bound);
        }
        if (d < D) 
          prev = L_Omega[d + 1, 1 : d] * head(z, d);
      }
    }
  }
}
generated quantities {
  corr_matrix[D] Omega;
  Omega = multiply_lower_tri_self_transpose(L_Omega);
}

  $ ../../../../../../install/default/bin/stanc --auto-format probit-multi.stan
functions {
  int sum_(array[,] int a) {
    int s;
    s <- 0;
    for (i in 1 : size(a)) 
      for (j in 1 : size(a[i])) 
        s <- s + a[i, j];
    return s;
  }
}
data {
  int<lower=1> K;
  int<lower=1> D;
  int<lower=0> N;
  array[N, D] int<lower=0, upper=1> y;
  array[N] vector[K] x;
}
transformed data {
  int<lower=0> N_pos;
  array[sum_(y)] int<lower=1, upper=N> n_pos;
  array[size(n_pos)] int<lower=1, upper=D> d_pos;
  int<lower=0> N_neg;
  array[(N * D) - size(n_pos)] int<lower=1, upper=N> n_neg;
  array[size(n_neg)] int<lower=1, upper=D> d_neg;
  N_pos <- size(n_pos);
  N_neg <- size(n_neg);
  {
    int i;
    int j;
    i <- 1;
    j <- 1;
    for (n in 1 : N) {
      for (d in 1 : D) {
        if (y[n, d] == 1) {
          n_pos[i] <- n;
          d_pos[i] <- d;
          i <- i + 1;
        }
        else {
          n_neg[j] <- n;
          d_neg[j] <- d;
          j <- j + 1;
        }
      }
    }
  }
}
parameters {
  matrix[D, K] beta;
  cholesky_factor_corr[D] L_Omega;
  vector<lower=0>[N_pos] z_pos;
  vector<upper=0>[N_neg] z_neg;
}
transformed parameters {
  array[N] vector[D] z;
  for (n in 1 : N_pos) 
    z[n_pos[n], d_pos[n]] <- z_pos[n];
  for (n in 1 : N_neg) 
    z[n_neg[n], d_neg[n]] <- z_neg[n];
}
model {
  L_Omega ~ lkj_corr_cholesky(4);
  to_vector(beta) ~ normal(0, 5);
  {
    array[N] vector[D] beta_x;
    for (n in 1 : N) 
      beta_x[n] <- beta * x[n];
    z ~ multi_normal_cholesky(beta_x, L_Omega);
  }
}
generated quantities {
  corr_matrix[D] Omega;
  Omega <- multiply_lower_tri_self_transpose(L_Omega);
}

Warning in 'probit-multi.stan', line 4, column 6: assignment operator <- is deprecated in the Stan language; use = instead.
Warning in 'probit-multi.stan', line 7, column 10: assignment operator <- is deprecated in the Stan language; use = instead.
Warning in 'probit-multi.stan', line 26, column 8: assignment operator <- is deprecated in the Stan language; use = instead.
Warning in 'probit-multi.stan', line 27, column 8: assignment operator <- is deprecated in the Stan language; use = instead.
Warning in 'probit-multi.stan', line 31, column 6: assignment operator <- is deprecated in the Stan language; use = instead.
Warning in 'probit-multi.stan', line 32, column 6: assignment operator <- is deprecated in the Stan language; use = instead.
Warning in 'probit-multi.stan', line 36, column 19: assignment operator <- is deprecated in the Stan language; use = instead.
Warning in 'probit-multi.stan', line 37, column 19: assignment operator <- is deprecated in the Stan language; use = instead.
Warning in 'probit-multi.stan', line 38, column 12: assignment operator <- is deprecated in the Stan language; use = instead.
Warning in 'probit-multi.stan', line 40, column 19: assignment operator <- is deprecated in the Stan language; use = instead.
Warning in 'probit-multi.stan', line 41, column 19: assignment operator <- is deprecated in the Stan language; use = instead.
Warning in 'probit-multi.stan', line 42, column 12: assignment operator <- is deprecated in the Stan language; use = instead.
Warning in 'probit-multi.stan', line 57, column 26: assignment operator <- is deprecated in the Stan language; use = instead.
Warning in 'probit-multi.stan', line 59, column 26: assignment operator <- is deprecated in the Stan language; use = instead.
Warning in 'probit-multi.stan', line 67, column 16: assignment operator <- is deprecated in the Stan language; use = instead.
Warning in 'probit-multi.stan', line 73, column 8: assignment operator <- is deprecated in the Stan language; use = instead.
